trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - default_python/*
      - dab_project_2/*

variables:
  - group: dev-variable-group
  - name: bundle_path_1
    value: 'default_python'
  - name: bundle_path_2
    value: 'dab_project_2'

jobs:
  - job: CheckBundleChanges
    displayName: 'Check for changes in specific paths'
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      displayName: "Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)"
    - script: |
        echo "Checking for changes in bundle paths"
        echo "BUNDLE1 var: $(bundle_path_1)"
        git fetch --unshallow
        BUNDLE1_CHANGED=$(git diff --name-only HEAD HEAD~1 | grep -E '^$(bundle_path_1)/')
        BUNDLE2_CHANGED=$(git diff --name-only HEAD HEAD~1 | grep -E '^$(bundle_path_2)/')
        if [ -n "$BUNDLE1_CHANGED" ]; then
          echo "##vso[task.setvariable variable=BUNDLE1_CHANGED;isOutput=true]true"
          echo "Bundle 1 changed"
        else
          echo "##vso[task.setvariable variable=BUNDLE1_CHANGED;isOutput=true]false"
        fi
        if [ -n "$BUNDLE2_CHANGED" ]; then
          echo "##vso[task.setvariable variable=BUNDLE2_CHANGED;isOutput=true]true"
          echo "Bundle 2 changed"
        else
          echo "##vso[task.setvariable variable=BUNDLE2_CHANGED;isOutput=true]false"
        fi
      name: CheckForBundleChanges

  - job: DeployBundle1Job
    displayName: 'Deploy Bundle 1'
    dependsOn: CheckBundleChanges
    condition: eq(dependencies.CheckBundleChanges.outputs['CheckForBundleChanges.BUNDLE1_CHANGED'], 'true')
    steps:
    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh
      displayName: "Install Databricks CLI"

    # Extract Databricks version to test installation
    - script: |
        databricks version
      displayName: "Get Databricks CLI version"

    - script: |
        echo "Deploying Bundle 1"
        cd $(bundle_path_1)
        databricks bundle validate
        databricks bundle deploy -t dev
      displayName: "Validate and deploy bundle"
      env:
        DATABRICKS_CLIENT_ID: $(DATABRICKS_CLIENT_ID)
        DATABRICKS_CLIENT_SECRET: $(DATABRICKS_CLIENT_SECRET)

  - job: DeployBundle2Job
    displayName: 'Deploy Bundle 2'
    dependsOn: CheckBundleChanges
    condition: eq(dependencies.CheckBundleChanges.outputs['CheckForBundleChanges.BUNDLE2_CHANGED'], 'true')
    steps:
    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh
      displayName: "Install Databricks CLI"

    # Extract Databricks version to test installation
    - script: |
        databricks version
      displayName: "Get Databricks CLI version"

    - script: |
        echo "Deploying Bundle 2"
        cd $(bundle_path_2)
        databricks bundle validate
        databricks bundle deploy -t dev
      displayName: "Validate and deploy bundle"
      env:
        DATABRICKS_CLIENT_ID: $(DATABRICKS_CLIENT_ID)
        DATABRICKS_CLIENT_SECRET: $(DATABRICKS_CLIENT_SECRET)